<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SwiftUI 概述 on SwiftUI</title>
    <link>https://swiftui.jokerhub.cn/</link>
    <description>Recent content in SwiftUI 概述 on SwiftUI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 27 Apr 2020 22:14:13 +0800</lastBuildDate>
    
	<atom:link href="https://swiftui.jokerhub.cn/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>绘制路径和形状</title>
      <link>https://swiftui.jokerhub.cn/tutorials/drawing_and_animation/drawing_paths_and_shapes/</link>
      <pubDate>Thu, 07 May 2020 23:20:15 +0800</pubDate>
      
      <guid>https://swiftui.jokerhub.cn/tutorials/drawing_and_animation/drawing_paths_and_shapes/</guid>
      <description>用户在浏览完一个地标后会得到一个徽章。但用户要得到徽章首先要先要创建一个徽章。本篇教程就是使用路径和形状创建徽章的过程，创建的徽章可以和其它图形组合形成位置标志。
如果想要针对不同种类的地标创建不同的徽章，可以尝试改变徽章基本组成符号的重复次数、角度或大小。
跟着教程一步步走，可以下载工程文件进行实践。
  项目文件   DrawingPathsAndShapes.zip  (6486 ko)    第一节 创建徽章视图 创建徽章前需要使用SwiftUI的矢量绘画API创建一个徽章视图
步骤1 选择文件-&amp;gt;新建-&amp;gt;文件，然后从iOS文件模板列表中选择SwiftUI View。点击下一步(Next)，输入文件名Badge后点击创建(Create)
步骤2 调整Badge视图，暂时先让它显示&amp;rdquo;Badge&amp;rdquo;文本，一会儿再绘制徽章的形状
第二节 绘制徽章背景 使用SwiftUI的图形API绘制一个徽章形状
步骤1 查看在文件HexagonParameters.swift中的代码。HexagonParameters结构体定义了绘制徽章六边形形状的控制点参数。不需要修改这些绘制相关的数据，仅仅使用这些数据指定绘制徽章形状时，线段和曲线的控制点位置。
步骤2 在Badge.swift文件中，绘制徽章的形状并使用fill修改器给六边形填充颜色，形成一个视图。使用路径可以把多条直线、曲线或其它绘制形状的基本笔划连成一个复杂的图形，就像形成徽章六边形背景这样.
步骤3 给路径添加起点，move(to:)方法可以把绘图光标移动到绘图中的一点，准备绘制的起点
步骤4 使用六边形的绘制参数数据HexagonParameters，依次绘制六边形的边，形成大致轮廓.addLine(to:)方法会使用当前绘图光标所在点为起点，方法参数中指定的点为终点绘制直线。目前六边形看起来有点问题，不过不要担心，这是意料中的事，下面的步骤做完，六边形的形状就会和开头显示的徽章的六边形形状一致了
步骤5 使用addQuadCurve(to:control:)方法绘制贝塞尔曲线，让六边形的角变的更圆润些。
步骤6 把徽章路径包裹在一个Geometry Reader中，这样徽章可以使用容器的大小，定义自己绘制的尺寸，这样就不需要硬编码绘制尺寸了(100)。当绘制区域不是正方形时，使用绘制区域的最小边长(长宽中哪个最小使用哪个)作为绘制徽章背景的边长，并保持徽章背景的长宽比为1:1
步骤7 使用xScale和xOffset参数调整变量，把徽章几何绘图区域居中绘制出来
步骤8 把黑色实心填充色改为渐变色，使徽章看上去和开始设计的样式一致
步骤9 渐变色上再使用aspectRatio(_:contentMode:)修改器，让渐变色按内容宽高比进行成比例渐变填充。保持1:1的长宽比，徽章背景可以保持居中在徽章视图中，不管徽章视图本身是不是正方形
第三节 绘制徽章符号 地标徽章中心有一个以地标App图标中的山峰图形改造形成的标志。山峰这个符号由两个形状组成，一个是表示山顶被雪覆盖的部分，另一个是山体。这里会使用有一定间距的两个局部三角形形状绘制这个徽章符号
步骤1 把之前的徽章视图形状抽出来单独形成一个BadgeBackground视图，并生成一个新的视图文件BadgeBackground.swift
步骤2 把BadgeBackground放在Badge的body属性中。
步骤3 创建名为BadgeSymbol的自定义视图，这个视图是一个山峰的形状，把这个形状复制多次并按一定角度旋转多次拼成一个徽章的图案
步骤4 使用pathAPI来绘制徽章符号的上半部分，试着调节spacing、topWidth、topHeight的系数，观察这些系数是怎么影响图形绘制的结果的
步骤5 绘制徽章图案的下半部分，使用move(to:)把绘图光标移到另一个图形绘制的起点，绘制新的形状
步骤6 用紫色填充徽章符号
第四节 组合徽章的前景符号和背景形状 徽章设计思路是在背景形状上面再绘制多个有固定旋转角度的山峰符号。定义一个新的类型用于展示旋转一定角度的徽章符号，使用ForEach生成不同旋转角度的山峰符号，绘制在徽章背景上，从而形成最终的徽章。
步骤1 创建RotatedBadgeSymbol视图封装旋转徽章符号，调整旋转的角度，并在预览视图中查看效果
步骤2 在Badge.swift中，使用ZStack把徽章图标放在徽章背景层上面。此时会发现，徽章符号的尺寸相比徽章背景大了许多，这不符合最初设计的预期
步骤3 缩放符号尺寸到合适的大小</description>
    </item>
    
    <item>
      <title>创建和组合视图</title>
      <link>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/creating_and_combining_views/</link>
      <pubDate>Thu, 30 Apr 2020 10:08:56 +0800</pubDate>
      
      <guid>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/creating_and_combining_views/</guid>
      <description>这个教程指导你构建一个名为Landmarks(地标)的应用。这个应用的功能是可以发现并分享你喜欢的地标。首先从创建地标详情页开始。
Landmarks使用栈来按层组合图片、文本等视图元素，从而布局页面。在视图中添加地图，需要引入MapKit组件，在你布局页面的过程中， Xcode可以提供实时的反馈，让你所做的改动立即转化成对应的代码实现。
  项目文件   CreatingAndCombiningViews.zip  (785 ko)    第一节 创建新项目并体验画布 创建SwiftUI项目工程，体验画布、预览模式和SwiftUI模板代码
要想在Xcode中预览画布中的视图或者与画布中的视图进行交互，要求你的Mac系统版本号不低于macOS Catalina 10.15
步骤1 打开Xcode，在启动页面点击创建新工程或者在菜单中选择文件-&amp;gt;新建-&amp;gt;项目
步骤2 在项目模板选择器中，选择iOS作为项目平台，选项单视图应用(Single View App)作为项目模板，并点击下一步(Next)
步骤3 输入Landmarks作为项目名称，选择SwiftUI作为用户界面的创建方式，并点击下一步(Next)，在磁盘目录下选择一个位置用来存放新创建的工程项目
步骤4 工程创建好并打开后，在文件导航器中，选择ContentView.swift文件，可以浏览一下SwiftUI视图的组成结构。默认情况下，SwiftUI的视图文件包含两个结构体(Struct) 第一个结构体遵循View协议，描述视图的内容和布局。第二个结构体声明为第一个视图的预览视图。
步骤5 在画布(Canvas)上，点击恢复(Resume)按钮可以显示预览视图，也可以使用快捷键Command+Option+P
如果工程中没有出现画布(Canvas)，可以选择菜单:编辑器(Editor) -&amp;gt; 编辑器和画布(Editor and Canvas) 打开画布进行预览
 步骤6 在body属性内部，修改文字Hello World为其它的不同的文字，当你在改变代码的同时，预览视图也会实时的更新对应的内容变化
第二节 定制文本视图(Text View) 可能通过修改代码来改变一个视图的显示样式，也可以通过检查器获取视图可修改属性，然后再写对应的代码改变样式。在创建应用的过程中，可以同时使用源码编辑器、画布或者检查器，无论当前使用的是哪一个工具编辑视图，代码会保持和这些编辑器展示的样式一致
下面我们使用检查器来定制视图的显示样式
步骤1 在预览视图中，按下Command键的同时点击控件，会弹出一个编辑弹层，然后选择检查器(Inspect), 编辑弹层显示所有可以定制的视图属性，选中的控件不同，可以定制的属性集合也不相同
步骤2 使用检查器把文字更改为Turtle Rock，也就是在应用中显示的第一个地标的名称
步骤3 改变字体修改器为Title，使用系统字体修饰文字，可以自动按照用户在设备中设置的字体偏好大小进行调整。定制SwiftUI视图所调用的方法被称为视图修改器(Modifiers)，修改器在原视图的基础上修改部分显示样式和属性，返回一个新的视图，这样就可以让多个修改器串连进行，形成水平方向的链式调用，或者垂直方向的堆叠调用
步骤4 手动在代码中添加foregroundColor(.green) 属性修改器，就会把文字的颜色调整为绿色。代码是决定视图样式的根本，当我们使用检查器来改变或移除一个属性修改器时，Xcode也会在代码编辑器中同步改变或移除对应的修改器代码
步骤5 在代码编辑器中，按下Command的同时点击Text单词也可以属性弹窗，从中选择检查器后，再点击Color弹出菜单，选择继承(Inherited)，让文字的颜色恢复成原来的黑色
步骤6 当我们移除 foregroundColor(.green) 时，Xcode会自动更新你的代码来反映视图的实际显示状况
第三节 使用栈来组合视图 上一节创建了标题视图，接下来要添加一些文本视图来描述地标所在州及所在公园的名称等其它详细信息</description>
    </item>
    
    <item>
      <title>视图动画和转场</title>
      <link>https://swiftui.jokerhub.cn/tutorials/drawing_and_animation/animating_views_and_transitions/</link>
      <pubDate>Thu, 07 May 2020 23:20:35 +0800</pubDate>
      
      <guid>https://swiftui.jokerhub.cn/tutorials/drawing_and_animation/animating_views_and_transitions/</guid>
      <description>使用SwiftUI可以把视图状态的改变转成动画过程，SwiftUI会处理所有复杂的动画细节
在这篇中，会给跟踪用户徒步的图表视图添加动画。使用animation(_:)修改器给一个视图添加动画效果非常容易
下载起步项目并跟着本篇教程一步步实践，或者查看本篇完成状态时的工程代码去学习
  项目文件   AnimatingViewsAndTransitions.zip  (6506 ko)    第一节 给每个视图单独添加动画 在视图上使用animation(_:)修改器时，SwiftUI会在视图的任何可进行动画的属性发生改变时产生对应的动画效果。视图的颜色、不透明度、旋转角度、大小及一些其它属性都是可进行动画的
步骤1 在HikeView.swift中，打开实时预览，体验一下图表的打开和隐藏，此时的状态改变时是没有添加动画效果的。在本篇的实践中，保持实时预览一直打开，每一步修改的效果就可以实时的看到
步骤2 给显示/隐藏切换的箭头按钮添加旋转动画，会发现现在按钮点击时的旋转有一个动画过渡的效果了
步骤3 当视图从隐藏到展示时，让切换按钮变大1.5倍
步骤4 把动画的类型从easeInOut改为spring()。SwiftUI包含一些预设或可自定义的动画类型，像弹簧(spring)动画和类型液体(fluid)动画类型。可以调整动画开始前的等待时长、动画的速度也可以指定让动画循环重复的进行
步骤5 如果只想让按钮具有缩放动画而不进行旋转动画，可以在scaleEffect添加animation(nil)来实现。可以在这里做一些实验，如果把其它的一些动画效果结合在一起，会怎么样
步骤6 学下一节之前，把本节中添加的animation(_:)修改器都去掉
第二节 把视图的状态改态转化成动画效果 已经学会了给单个视图添加动画的方法，现在可以学习怎么在视图的状态发生改变时添加动画效果。当用户点击按钮时会切换showDetail状态的值，在视图变化过程中添加动画效果。
步骤1 把showDetail.toggle()包裹在withAnimation函数调用块中。showDetail的改变影响了视图HikeDetail和详情切换按钮，在显示/隐藏详情的过程中都有了过滤动画效果。
放慢动画速度，可以观察SwiftUI动画在被中断下是怎么运作的
步骤2 给withAnimation传入一个时长4秒的基本动画参数.easeInOut(duration:4)，可以指定动画过程时长，给withAnimation传入的动画参数与.animation(_:)修改器可用参数一致。
步骤3 在动画过程进行中点击按钮切换视图状态，查看对应的动画被中断时的效果
步骤4 读下一节之前，把动画时长参数(.easeInOut(duration: 4))去掉，让动画不再缓慢进行。
第三节 定制视图转场动画 默值情况下，视图离屏和入屏时的动画效果是渐隐/渐现， 这个默认的转场效果可以使用transition(_:)修改器进行定制。
步骤1 给HikeView视图添加transition(_:)修改器，并定制转场参数为.slide，转场动画为滑入/滑出
步骤2 可以把滑入/滑出这种转场动画封装起来，方便其它视图复用同样的转场效果
步骤3 在moveAndFade转场效果的定义中使用move(edge:)，让滑入/滑出从屏幕的同一边进行
步骤4 使用asymmetric(insertion:removal:)修改器来定制视图显示/消失时的转场动画效果
第四节 组合复杂的动画效果 点击图表下面的三个按钮，会在三个不同的数据集间进行切换并展示。本节中会使用组合动画，让图表在不同数据集间切换时的转换动画流畅自然。
步骤1 把showDetail的默认值改为true，并把HikeView的预览模式视图固定在画布上。这样可以在编辑其它文件时，依然看到动画效果的变化。
步骤2 在HikeGraph.swift中定义了一个新的波动动画，并把它与滑入/滑出动画一起应用到图表视图上。
步骤3 把动画切换为弹簧动画(spring)，并设置弹簧阻尼系数为0.5，动画过程中产生了逐渐回弹效果
步骤4 加速弹簧动画的执行速度，缩短切换图表的时间
步骤5 以当条形在图表中的位置为参数，添加延迟效果，图表中的每个条形会顺序动起来
步骤6 观察一下自定义波动(rippling)效果是怎么作用在视图转场中的</description>
    </item>
    
    <item>
      <title>创建列表和导航</title>
      <link>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/building_lists_and_navigation/</link>
      <pubDate>Thu, 30 Apr 2020 10:09:35 +0800</pubDate>
      
      <guid>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/building_lists_and_navigation/</guid>
      <description>地标详情页视图已经创建完成，我们需要提供一种方式让用户可以查看完整的地标列表，并且可以查看每一个地标的详情
下面会创建一个可以展示任何地标信息的视图，并动态生成一个可滚动列表，用户可以点击列表项去查看地标的详细信息。优化视图显示时，可以使用Xcode画布来渲染多个不同设备大小下的预览视图。
下载下面的工程文件，并跟着教程一步步学习构建列表和视图间导航
  项目文件   BuildingListsAndNavigation.zip  (6478 ko)    第一节 了解样本数据 前面的教程中，自定义视图所展示的信息都直接被写死在代码中，这篇教程中会学习给自定义视图传入样本数据进行展示
步骤1 打开项目导航器，选择Models-&amp;gt;Landmark.swift文件，这个文件中声明了需要在应用中展示一个地标所需要信息的结构化名称，并通过导入landmarkData.json文件中的数据，生成一个地标信息数组。
步骤2 在项目导航器中选择Resources-&amp;gt;landmarkData.json，在后面的教程中我们都会使用这个样本数据文件
步骤3 注意，之前的ContentView视图，已经被改名为LandmarkDetail了，在本教程和后面的教程中，还会创建一些其它的视图
第二节 创建行视图 本教程中创建的第一个视图就是用来显示每个地标的行视图，行视图把地标的相关信息存储在一个属性中，一行就可以代表一个地标，稍后就会把这些行组合成为一个列表。
步骤1 创建一个名为LandmarkRow.swift的SwiftUI视图
步骤2 如果预览视图没有出现，可以选择菜单编辑器-&amp;gt;画布，打开画布，并点击Resume进行预览，或者使用Command+Option+Enter快捷键调出画面，再使用Command+Option+P快捷键开始预览模式
步骤3 添加landmark属性做为LandmarkRow视图的一个存储属性。当添加landmark属性后，预览视图可能会停止工作，因为LandmarkRow视图初始化时需要有一个landmark实例。要想修复预览视图，需要修改Preview Provider
步骤4 在LandmarkRow_Previews的静态属性previews中给LandmarkRow初始化器中传入landmark参数，这个参数使用landmarkData数组的第一个元素。预览视图当前显示Hello, World
步骤5 在一个HStack中嵌入一个Text
步骤6 修改这个Text，让它使用landmark属性的name字段
步骤7 在Text视图前面添加一个图片视图，在Text视图后面添加Spacer视图
第三节 自定义行预览 Xcode的画布会自动识别当前代码编辑器中遵循PreviewProvider协议的类型，并将它们渲染并展示在画面上。一个视图预览提供者(preview provider)返回一个或多个视图，这些视图可以配置不同的大小和设备型号。
可以定制从preview provider中返回的视图被渲染在何种场景下。
步骤1 在LandmarkRow_Previews中，把landmark参数更新为landmarkData数组的第二个元素，预览视图会立即刷新反映第二个元素的渲染情况
步骤2 使用previewLayout(_:)修改器设置一个行视图在列表中显示的尺寸大小。可以使用Group的方式，返回多个不同场景下的预览视图
步骤3 把预览的行视图包裹在Group中，把之前的第一个行视图也加进去。Group是一个容器，它可以把视图内容组织起来，Xcode会把Group内的每个子视图当作画布内一个单独的预览视图处理
步骤4 为了简化代码，可以把previewLayout(_:)这个修改器应用到外层的Group上，Group的每一个子视图会继承自己所处环境的配置。对preivew provider的修改只会影响预览画布的表现，对实际的应用不会产生影响。
第四节 创建地标列表 使用SwiftUI列表类型可以展示平台相关的列表视图。列表的元素可以是静态的，类似于栈内部的子视图，也可以是动态生成的视图，也可以混合动态和静态的视图。
步骤1 创建SwiftUI视图，命名为LandmarkList.swift
步骤2 用List替换默认创建的Text，并将前两个LandmarkRow实例做为列表的子元素，预览视图中会以列表的形式展示出两个地标
第五节 创建动态列表 除了单独列出列表中的每个元素外，列表还可以从一个集合中动态的生成。
创建列表时可以传入一个集合数据和一个闭包，闭包会针对每一个数据元素返回一个视图，这个视图就是列表的行视图。</description>
    </item>
    
    <item>
      <title>处理用户输入</title>
      <link>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/handling_user_input/</link>
      <pubDate>Thu, 30 Apr 2020 10:09:51 +0800</pubDate>
      
      <guid>https://swiftui.jokerhub.cn/tutorials/swiftui_essentials/handling_user_input/</guid>
      <description>在Landmark应用中，标记喜爱的地方，过滤地标列表，只显示喜欢的地标。要增加这些特性，首先要在列表上添加一个开关，用来过滤用户喜欢的地标。在地标上添加一个星标按钮，用户可以点击它来标记这个地标为自己喜欢的。
下载工程文件并且跟着下面的教程实践
  项目文件   HandlingUserInput.zip  (6485 ko)    第一节 标记用户最喜欢的地标 给地标列表的每一行添加一个星标用来表示用户是否标记该地标为自己喜欢的
步骤1 打开工程项目，在项目导航下选择LandmarkRow.swift文件
步骤2 在空白占位后面添加一个if表达式，if表达式判断是否当前地标是用户喜欢的，如果用户标记当前地标为喜欢就显示星标。可以在SwitUI的代码块中使用if语句来条件包含视图
步骤3 由于系统图片是矢量类型的，可以使用foregroundColor(_:)来改变它的颜色。当地标landmark的isFavorite属性为真时，星标显示，稍后会讲怎么修改属性值。
第二节 过滤列表 可以定制地标列表，让它只显示用户喜欢的地标，或者显示所有的地标。要实现这个功能，需要给LandmarkList视图类型添加一些状态变量。
状态(State)是一个值或者一个值的集合，会随着时间而改变，同时会影响视图的内容、行为或布局。在属性前面加上@State修饰词就是给视图添加了一个状态值
步骤1 选择LandmarkList.swift文件，并给LandmarkList添加一个名为showFavoritesOnly的状态，初始值设置为false
步骤2 点击Resume按钮或快捷键Command+Option+P刷新画布。当对视图进行添加或修改属性等结构性改变时，需要手动刷新画布
步骤3 代码中通过检查showFavoritesOnly属性和每一个地标的isFavorite属性值来过滤地标列表所展示的内容
第三节 添加控件来切换状态 为了让用户控制地标列表的过滤器，需要添加一个可以修改showFavoritesOnly值的控件，传递一个绑定关系给toggle控件可以实现
一个绑定关系(binding)是对可变状态的引用。当用户点击toggle控件，从开到关或从关到开，toggle控件会通过绑定关系对应的更新视图的状态
步骤1 创建一个嵌套的ForEach组来把地标数据转换成地标行视图。在一个列表中组合静态和动态视图，或者组合两个甚至多个不同的动态视图组，使用ForEach类型动态生成而不是给列表传入数据集合生成列表视图
步骤2 添加一个Toggle视图作为列表的每一个子视图，传入一个showFavoritesOnly的绑定关系。使用$前缀来获得一个状态变量或属性的绑定关系
步骤3 实时预览模式下，点击Toggle控件来验证过滤器的功能
第四节 使用可观察对象来存储数据 要实现用户标记哪个地标为自己喜爱的地标这个功能，需要使用可观察对象(observalble object)存放地标数据
可观察对象是一种可以绑定到具体SwifUI视图环境中的数据对象。SwiftUI可以察觉它影响视图展示的任何变化，并在这种变化发生后及时更新对应视图的展示内容
步骤1 创建一个名为UserData.swift的文件
步骤2 声明一个遵循ObservableObject协议的新数据模型，ObservableObject协议来自响应式框架Combine。SwiftUI可以订阅可观察对象，并在数据发生改变时更新视图的显示内容
步骤3 添加存储属性showFavoritesOnly和landmarks，并赋予初始值。可观察对象需要对外公布内部数据的任何改动，因此订阅此可观察对象的订阅者就可以获得对应的数据改动信息
步骤4 给新建的数据模型的每一个属性添加@Published属性修饰词
第五节 视图中适配数据模型对象 已经创建了UserData可观察对象，现在要改造视图，让它使用这个新的数据模型来存储视图内容数据
步骤1 在LandmarkList.swift文件中，使用@EnvironmentObject修饰的userData属性来替换原来的showFavoritesOnly状态属性，并对预览视图调用environmentObject(_:)修改器。只要environmentObject(_:)修改器应用在视图的父视图上，userData就能够自动获取它的值。
步骤2 替换原来使用showFavoritesOnly状态属性的地方，改为使用userData中的对应属性。与@State修饰的属性一样，也可以使用$前缀访问userData对象的成员绑定引用
步骤3 创建ForEach实例时使用userData.landmarks做为数据源
步骤4 在SceneDelegate.swift中，对LandmarkList视图调用environmentObject修改器，这样可以把UserData的数据对象绑定到LandmarkList视图的环境变量中，子视图可以获得父视图环境中的变量。此时如果在模拟器或者真机上运行应用，也可以正常展示视图内容
步骤5 更新LandmarkDetail视图，让它从父视图的环境变量中取要展示的数据。之后在更新地标的用户喜爱状态时，会用到landmarkIndex这个变量</description>
    </item>
    
  </channel>
</rss>